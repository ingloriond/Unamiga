#include <iostream>
#include <cmath>
#include <bitset>
#include <string>
#include <algorithm>

using namespace std;

string b2c(bool b) { string s= b ? "1" : "0"; return s;}

int jt51_lut[] = {
 8168, 8148, 8124, 8104, 8080, 8060, 8040, 8016, 7996, 7972, 7952, 7932,
 7908, 7888, 7864, 7844, 7824, 7804, 7780, 7760, 7740, 7720, 7696, 7676,
 7656, 7636, 7616, 7592, 7572, 7552, 7532, 7512, 7492, 7472, 7452, 7432,
 7412, 7392, 7372, 7352, 7332, 7312, 7292, 7272, 7252, 7232, 7212, 7192,
 7176, 7156, 7136, 7116, 7096, 7076, 7060, 7040, 7020, 7000, 6984, 6964,
 6944, 6928, 6908, 6888, 6868, 6852, 6832, 6816, 6796, 6776, 6760, 6740,
 6724, 6704, 6688, 6668, 6652, 6632, 6616, 6596, 6580, 6560, 6544, 6524,
 6508, 6492, 6472, 6456, 6436, 6420, 6404, 6384, 6368, 6352, 6336, 6316,
 6300, 6284, 6264, 6248, 6232, 6216, 6200, 6180, 6164, 6148, 6132, 6116,
 6100, 6080, 6064, 6048, 6032, 6016, 6000, 5984, 5968, 5952, 5936, 5920,
 5904, 5888, 5872, 5856, 5840, 5824, 5808, 5792, 5776, 5760, 5744, 5732,
 5716, 5700, 5684, 5668, 5652, 5636, 5624, 5608, 5592, 5576, 5564, 5548,
 5532, 5516, 5504, 5488, 5472, 5456, 5444, 5428, 5412, 5400, 5384, 5368,
 5356, 5340, 5328, 5312, 5296, 5284, 5268, 5256, 5240, 5228, 5212, 5200,
 5184, 5168, 5156, 5144, 5128, 5116, 5100, 5088, 5072, 5060, 5044, 5032,
 5020, 5004, 4992, 4976, 4964, 4952, 4936, 4924, 4912, 4896, 4884, 4872,
 4856, 4844, 4832, 4820, 4804, 4792, 4780, 4768, 4752, 4740, 4728, 4716,
 4704, 4688, 4676, 4664, 4652, 4640, 4628, 4616, 4600, 4588, 4576, 4564,
 4552, 4540, 4528, 4516, 4504, 4492, 4480, 4468, 4456, 4444, 4432, 4420,
 4408, 4396, 4384, 4372, 4360, 4348, 4336, 4324, 4312, 4300, 4288, 4276,
 4264, 4256, 4244, 4232, 4220, 4208, 4196, 4184, 4176, 4164, 4152, 4140,
 4128, 4120, 4108, 4096 };


int main() {
	bitset<10> base[128];
	bitset<3>  suma[128];
	for(int &k : jt51_lut ) k = (k>>2) - 1024;
	for(int k=0; k<256; k+=2 ) {		
		int diff = jt51_lut[k] - jt51_lut[k+1];
		base[k>>1] = jt51_lut[k+1];
		suma[k>>1] = diff;
		// if( diff > 7 ) { cout << "Error\n"; return 1; }
		// cout << jt51_lut[k+1] << '\t' << diff << '\n';
	}
	
	for( int k=0; k<128; k++ ) {
		cout << k << '\t' << base[k].to_ulong() << '\t';
		cout << base[k].to_string() << '\t' << suma[k].to_string() << '\n';
	}
	cout << "****************************************\n";
	string filas[32];
	for( int j=0; j<4; j++ )
	for( int k=0; k<32; k++ ) {
		int i = k+(j<<5);
		string s = base[i].to_string();
		if( j==0 ) {
			if( !base[i][9] ) { cout << "Error en j==0\n"; return 1; }
			if( suma[i][2] != true ) { cout << "Error en j==0\n"; return 1; }			
			cout << "{ /* 1'b1, */ 9'b" << s.substr(1) << ", /* 1'b1, */ 2'b" << suma[i].to_string().substr(1) << " }, // " << base[i].to_ulong() << " and " << base[i].to_ulong()+suma[i].to_ulong() << "\n";		
			filas[k] += s.substr(1) + suma[i].to_string().substr(1);
		}
		
		if( j==1 ) {
			if( suma[i][2] != true || suma[i][1] != false ) { cout << "Error en j==1\n"; return 1; }			
			cout << "{ 10'b" << s << ", /* 2'b10, */ 1'b" << suma[i].to_string().back() << " }, // " << base[i].to_ulong() << " and " << base[i].to_ulong()+suma[i].to_ulong() << "\n";
			filas[k] += s + suma[i].to_string().back();
		}
		
		if( j==2 ) {
			if( base[i][9] ) { cout << "Error en j==2\n"; return 1; }
			cout << "{ /* 1'b0, */ 9'b" << s.substr(1) << ", 3'b" << suma[i].to_string() << " }, // " << base[i].to_ulong() << " and " << base[i].to_ulong()+suma[i].to_ulong() << "\n";
			filas[k] += s.substr(1) + suma[i].to_string();
		}	
		
		if( j==3 ) {
			if( base[i][9] || base[i][8] ) { cout << "Error en j==3\n"; return 1; }
			cout << "{ /* 2'b00, */ 8'b" << s.substr(2) << ", 3'b" << suma[i].to_string() << " }, // " << base[i].to_ulong() << " and " << base[i].to_ulong()+suma[i].to_ulong() << "\n";
			filas[k] += s.substr(2) + suma[i].to_string();
		}			
		
	}
	cout << " ****************************\n";
	for( int k=0; k<32; k++ ) {
		cout << "explut_jt51[" << k << "] <= 45'b" << filas[k];
		//for( int j=44; j>=0; j-- ) cout << filas[k][j];
		cout << ";\n";
	}
	/**************/
	bitset<45> sauraen[32];
	sauraen[0]  = bitset<45>("101110011001000000110100010111111000111111011");
	sauraen[1]  = bitset<45>("110011011100001100000011111001011000111111011");
	sauraen[2]  = bitset<45>("010110111001011101110101101111000000111111011");
	sauraen[3]  = bitset<45>("011010101010000001110110000111000000111111011");
	sauraen[4]  = bitset<45>("110110101010000001010001100001000000111111011");
	sauraen[5]  = bitset<45>("101110111001111000110110111010101010010111011");
	sauraen[6]  = bitset<45>("000000110000110100111001011110111011010011011");
	sauraen[7]  = bitset<45>("011110111001100100010110100100111011010011011");
	sauraen[8]  = bitset<45>("010110111000101000110101100010110011010011011");
	sauraen[9]  = bitset<45>("001010111001010011110011001110000011010011011");
	sauraen[10] = bitset<45>("101010011001011011010100111101000111000011011");
	sauraen[11] = bitset<45>("110110011000011111110011110011001111100001011");
	sauraen[12] = bitset<45>("101111011101100111100100000011001111100001011");
	sauraen[13] = bitset<45>("100010101010101011010111101101111100100001011");
	sauraen[14] = bitset<45>("110010011001100011010000001101111100100001011");
	sauraen[15] = bitset<45>("101010111000011100110101011010110100100001011");
	sauraen[16] = bitset<45>("111011011101010100100010110000110100100001011");
	sauraen[17] = bitset<45>("100011011100111000000001010100100100100001011");
	sauraen[18] = bitset<45>("110011011101110000000110101110001100000001011");
	sauraen[19] = bitset<45>("101011111100001110100001101000001100000001011");
	sauraen[20] = bitset<45>("101010011001000110110110010001001000000001011");
	sauraen[21] = bitset<45>("101011011100101010000101110111010001000101110");
	sauraen[22] = bitset<45>("110011111101100010000010011111110011001100110");
	sauraen[23] = bitset<45>("100011011100001100100111001001110011001100110");
	sauraen[24] = bitset<45>("010101011100000000100100101011111011101110100");
	sauraen[25] = bitset<45>("000111011101101000000011000111101011101110100");
	sauraen[26] = bitset<45>("010110011000100100010100110100101011101110100");
	sauraen[27] = bitset<45>("000010011001000110010011011000001011101110100");
	sauraen[28] = bitset<45>("100011011100101010100000011010000011101110100");
	sauraen[29] = bitset<45>("110111011101100010100111100100010010101110100");
	sauraen[30] = bitset<45>("000000001001000100110000000100010010101110100");
	sauraen[11] = bitset<45>("000011011100101000000001100010011010001110100");
	bitset<45> ordenado[32];
	for( int k=0; k<8; k++ ) {
		bitset<45> &s = sauraen[k];
		string orden = b2c(s[43])+b2c(s[40])+b2c(s[36])+b2c(s[32])+b2c(s[28])+b2c(s[24])
			+ b2c(s[18])+ b2c(s[14])+ b2c(s[3])
			+ b2c(s[10])+ b2c(s[7]);
		string aux = filas[k].substr(0,11);
		cout << aux << "\n" << orden << "\n\n";
	}
	return 0;
}
